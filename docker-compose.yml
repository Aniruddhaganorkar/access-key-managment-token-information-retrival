services:
  http_api:
    build:
      context: .
      dockerfile: ./services/http-api/Dockerfile
      target: development
      # container_name: http-api
    command: npm run start:dev http-api
    # env_file:
    #   - ./services/http_api/.env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3000:3000"

  access_key:
    build:
      context: .
      dockerfile: ./services/access-key/Dockerfile
      target: development
      # container_name: access-key
    command: npm run start:dev access-key
    # env_file:
    #   - ./app/access-key/.env
    depends_on:
      - kms_pg_db
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules


  token_info:
    build:
      context: .
      dockerfile: ./services/token-info/Dockerfile
      target: development
      # container_name: token-info
    command: npm run start:dev token-info
    # env_file:
    #   - ./app/token-info/.env
    depends_on:
      - tis_mongo_db
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules

  nats:
    image: nats
    ports:
      - 4222:4222

  kms_pg_db:
    image: postgres:15.3-alpine3.18
    restart: always
    environment:
      - POSTGRES_DB==access_key
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes: 
      - ./db:/data/pg_db
      - ./create-kms-db.sql:/docker-entrypoint-initdb.d/create_database.sql

  tis_mongo_db:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./db:/data/mongo_db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_DATABASE=token_info
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password